	.data
v$a:	.space	4

	.text
___start:
	jal	f_main
	li	$v0, 10
	syscall		 # stoppe l'execution du processus
f_main:
	subi	$sp, $sp, 4		 # empile registre
	sw	$fp, 0($sp)
	move	$fp, $sp		 # nouvelle valeur de $fp
	subi	$sp, $sp, 4		 # empile registre
	sw	$ra, 0($sp)
	li	$v0, 5
	syscall		 # lecture
	subi	$sp, $sp, 4		 # empile registre
	sw	$v0, 0($sp)
	lw	$t1, 0($sp)		 # depile vers registre
	addi	$sp, $sp, 4
	sw	$t1, v$a		 # stocke variable
	lw	$t1, v$a		 # lit variable dans $t1
	subi	$sp, $sp, 4		 # empile registre
	sw	$t1, 0($sp)
	li	$t0, 10
	subi	$sp, $sp, 4		 # empile registre
	sw	$t0, 0($sp)
	lw	$t1, 0($sp)		 # depile vers registre
	addi	$sp, $sp, 4
	lw	$t0, 0($sp)		 # depile vers registre
	addi	$sp, $sp, 4
	li	$t2, -1		 # inf
	blt	$t0, $t1, i_e0
	li	$t2, 0
i_e0:
	subi	$sp, $sp, 4		 # empile registre
	sw	$t2, 0($sp)
	lw	$t0, 0($sp)		 # depile vers registre
	addi	$sp, $sp, 4
	beq	$t0, $zero, i_condexp_f2
	li	$t0, 0
	subi	$sp, $sp, 4		 # empile registre
	sw	$t0, 0($sp)
	j	i_condexp_s1
i_condexp_f2:
	li	$t0, 1
	subi	$sp, $sp, 4		 # empile registre
	sw	$t0, 0($sp)
i_condexp_s1:
	lw	$a0, 0($sp)		 # depile vers registre
	addi	$sp, $sp, 4
	li	$v0, 1
	syscall		 # ecriture
	li	$a0, '\n'
	li	$v0, 11
	syscall		 # ecrire char
	lw	$ra, 0($sp)		 # depile vers registre
	addi	$sp, $sp, 4
	lw	$fp, 0($sp)		 # depile vers registre
	addi	$sp, $sp, 4
	jr	$ra
